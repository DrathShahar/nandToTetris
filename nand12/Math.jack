// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array twoToThe;
    static int qy2;

    /** Initializes the library. */
    function void init() {
        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = 16384 + 16384;
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0)
        {
            return -x;
        }
        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedX, i, temp, digitsNum;
        var bool isResNeg;
        let sum = 0;
        let i = 0;
        let temp = 1;
        let digitsNum = 0;
        let isResNeg = Math.isMultResNeg(x,y);
        let x = Math.abs(x);
        let y = Math.abs(y);
        let shiftedX = x;
        while (y > (temp - 1))
        {
            let digitsNum = digitsNum + 1;
            let temp = temp + temp;
        }
        while (i < digitsNum)
        {
            if (Math.isDigitOne(i, y))
            {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let i = i + 1;
        }
        if (isResNeg)
        {
            return -sum;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int res;
        var bool isResNeg;
        let isResNeg = Math.isMultResNeg(x, y);
        let x = Math.abs(x);
        let y = Math.abs(y);
        if (x < y)
        {
            return 0;
        }
        let res = Math.dividePositive(x, y);
        if (isResNeg)
        {
            return -(res);
        }
        return res;
    }

    /** Returns the integer part of x/y, when x and y are positive*/
    function int dividePositive(int x, int y) {
        var int q, temp;
        if ((x < y) | (y < 0))
        {
            let qy2 = 0;
            return 0;
        }
        let q = Math.dividePositive(x, y + y);
        if ((x - qy2) < y)
        {
            return q + q;
        }
        let qy2 = qy2 + y;
        return q + q + 1;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, i, temp, value;
        let y = 0;
        let i = 7;
        while (i > -1)
        {
            let temp = y + twoToThe[i];
            let value = Math.multiply(temp, temp);
            if ((value - 1 < x) & (value > 0))
            {
                let y = temp;
            }
            let i = i - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b)
        {
            return a;
        }
        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b)
        {
            return a;
        }
        return b;
    }

    /** Returns true if i'th digit of x is 1*/
    function bool isDigitOne(int i, int x) {
        return ((twoToThe[i] & x) = twoToThe[i]);
    }

    /** Returns true if the two arguments have different sign*/
    function bool isMultResNeg(int a, int b) {
        return (((a < 0) & (b > 0)) | ((b < 0) & (a > 0)));
    }

    /** Returns i%j, when j is a power 2 */
    function int modulo(int i, int j)
    {
        return (i & (j - 1));
    }

    /** Returns 2^i */
    function int getTwoToThe(int i)
    {
        return twoToThe[i];
    }

    /** Returns the product of x and 32. */
    function int multiply32(int x){
        let x = x + x;
        let x = x + x;
        let x = x + x;
        let x = x + x;
        let x = x + x;
        return x;
    }
}
