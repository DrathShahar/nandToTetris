// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array mem;
    static int heapAdd, heapEnd;
    /** Initializes the class. */
    function void init() {
        let mem = 0;
        let heapAdd = 2048;
        let heapEnd = 16383;
        let mem[heapAdd] = 14334;
        let mem[heapAdd + 1] = 0;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return mem[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let mem[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) { // **is first fit ok? what to do in case of failure?**
        var int i, mSize;
        let i = heapAdd + 1;
        while((mem[i - 1] < (size + 1)) & (~(mem[i] = 0)))
        {
            let i = mem[i];
        }
        let mSize = mem[i - 1];
        if (mSize < (size + 1))
        {
            do Sys.error(6);
            return 6;
        }
        let mem[i - 1] = mSize - size - 1;
        let mem[i + mSize - size] = size + 1;
        return i + mSize - size + 1;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int next;
        let next = heapAdd + 1;
        while (~(mem[next] = 0))
        {
            if ((next + mem[next - 1] + 1) = (o - 1))
            {
                let mem[next - 1] = mem[next - 1] + mem[o - 1];
                return;
            }
            let next = mem[next];
        }
        if ((next + mem[next - 1] + 1) = (o - 1))
            {
                let mem[next - 1] = mem[next - 1] + mem[o - 1];
                return;
            }
        let mem[o] = 0;
        let mem[o - 1] = mem[o - 1] - 2;
        let mem[next] = o;
        return;
    }
}