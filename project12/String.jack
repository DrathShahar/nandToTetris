// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int size, cap;
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (0 < maxLength){
            let str = Array.new(maxLength);
        }
        let size = 0;
        let cap = maxLength;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (cap > 0){
            do str.dispose();
        }
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return size;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let str[size] = c;
        let size = size + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let size = size - 1;
        return;
    }

    /** Returns the integer value of this string,
     *  until a non-digit character is detected. */
    method int intValue() {           // **is it ok that it ignores 0's at start?**
        var int i, num, sign;
        let i = 0;
        let num = 0;
        let sign = 1;
        if (str[i] = 45){
            let sign = -1;
            let i = i + 1;
        }
        while ((i < size) & (47 < str[i]) & (str[i] < 58)){
                let num = (num * 10) + (str[i] - 48);
                let i = i + 1;
            }
            return (num * sign);
        }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        if (val < -32767){
            do makeBiggest();
            return;
        }
        let size = 0;
        if (val < 0){
            do appendChar(45);
            let val = Math.abs(val);
        }
        do setIntHelper(val);
        return;
    }

    method void setIntHelper(int val){
        var char c;
        let c = (val - ((val / 10) * 10)) + 48;
        if (val < 10){
            do appendChar(c);
            return;
        }
        do setIntHelper(val / 10);
        do appendChar(c);
        return;
    }

    method void makeBiggest(){
        let size = 0;
        do appendChar(45);
        do appendChar(3 + 48);
        do appendChar(2 + 48);
        do appendChar(7 + 48);
        do appendChar(6 + 48);
        do appendChar(8 + 48);
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
